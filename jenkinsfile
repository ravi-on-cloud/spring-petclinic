pipeline {
    agent any

    tools {
        maven 'maven' // This must match the Maven tool name in Jenkins -> Tools
    }

    environment {
        ImageName = 'my-app-image'
        BUILD_TAG = "latest"
    }

    stages {

        stage('Checkout From Git') {
            steps {
                git branch: 'main', url: 'https://github.com/ravi-on-cloud/spring-petclinic.git'
            }
        }

        stage('Maven Validate') {
            steps {
                sh 'mvn -B validate'
            }
        }

        stage('Maven Compile') {
            steps {
                sh 'mvn -B compile'
            }
        }

        stage('Maven Test') {
            steps {
                sh 'mvn -B test'
            }
        }

        stage('Maven Package') {
            steps {
                sh 'mvn -B package'
            }
        }

        /* ---- SonarCloud (Scanner CLI) ---- */
        stage('SonarCloud Analysis') {
            environment {
                SCANNER_HOME = tool 'sonar-scanner'   // Jenkins -> Tools: SonarQube Scanner name
            }
            steps {
                withSonarQubeEnv('sonarserver') {      // Jenkins -> System: SonarQube server name
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                          -Dsonar.organization=ravi-on-cloud \
                          -Dsonar.projectName=jenkins \
                          -Dsonar.projectKey=ravi-on-cloud_jenkins \
                          -Dsonar.sources=src \
                          -Dsonar.java.binaries=target/classes \
                          -Dsonar.host.url=https://sonarcloud.io
                    '''
                }
            }
        }

        /* ---- SonarCloud (Maven plugin with token) ---- */
        stage('Publish Sonar Report') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        mvn -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
                          -Dsonar.projectKey=ravi-on-cloud_jenkins \
                          -Dsonar.organization=ravi-on-cloud \
                          -Dsonar.host.url=https://sonarcloud.io \
                          -Dsonar.login=$SONAR_TOKEN \
                          -Dsonar.qualitygate.wait=false
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t ${ImageName}:${BUILD_TAG} .
                    docker tag ${ImageName}:${BUILD_TAG} ravi5291.azurecr.io/${ImageName}:${BUILD_TAG}
                '''
            }
        }

        stage('Trivy Scan') {
            steps {
                sh '''
                    trivy image --format table --severity HIGH,CRITICAL \
                      --output trivy-report.txt ravi5291.azurecr.io/${ImageName}:${BUILD_TAG}
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-report.txt', fingerprint: true
                }
            }
        }

        stage('Login to ACR and Push Image') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'azure-sp', usernameVariable: 'AZURE_USERNAME', passwordVariable: 'AZURE_PASSWORD'),
                    string(credentialsId: 'azure-tenant', variable: 'TENANT_ID')
                ]) {
                    sh '''
                        az login --service-principal -u "$AZURE_USERNAME" -p "$AZURE_PASSWORD" --tenant "$TENANT_ID"
                        az acr login --name ravi5291
                        docker push ravi5291.azurecr.io/${ImageName}:${BUILD_TAG}
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                    az aks get-credentials --resource-group demo11 --name ravi-aks-cluster11 --overwrite-existing
                    kubectl apply -f k8s/petclinic.yml
                    kubectl get all
                '''
            }
        }
    }
}
